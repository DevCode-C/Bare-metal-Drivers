# 0 "Sources/nvic.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "Sources/nvic.c"
# 1 "Headers/nvic.h" 1
# 1 "Headers/types.h" 1
# 27 "Headers/types.h"
typedef unsigned long uint32_t;
typedef unsigned short uint16_t;
typedef unsigned char uint8_t;

typedef signed long int32_t;
typedef signed short int16_t;
typedef signed char int8_t;
# 2 "Headers/nvic.h" 2
# 1 "Headers/registers.h" 1




typedef enum
{
  WWDG_IRQn = 0,
  RTC_IRQn = 2,
  FLASH_IRQn = 3,
  RCC_IRQn = 4,
  EXTI0_1_IRQn = 5,
  EXTI2_3_IRQn = 6,
  EXTI4_15_IRQn = 7,
  DMA1_Channel1_IRQn = 9,
  DMA1_Channel2_3_IRQn = 10,
  DMA1_Channel4_5_IRQn = 11,
  ADC1_IRQn = 12,
  TIM1_BRK_UP_TRG_COM_IRQn = 13,
  TIM1_CC_IRQn = 14,
  TIM3_IRQn = 16,
  TIM6_IRQn = 17,
  TIM7_IRQn = 18,
  TIM14_IRQn = 19,
  TIM15_IRQn = 20,
  TIM16_IRQn = 21,
  TIM17_IRQn = 22,
  I2C1_IRQn = 23,
  I2C2_IRQn = 24,
  SPI1_IRQn = 25,
  SPI2_IRQn = 26,
  USART1_IRQn = 27,
  USART2_IRQn = 28,
  USART3_4_IRQn = 29,
  USB_IRQn = 31
}IRQ_Types;


typedef struct __gpio_registers
{
    volatile uint32_t MODER;
    volatile uint32_t OTYPER;
    volatile uint32_t OSPEEDR;
    volatile uint32_t PUPDR;
    volatile uint32_t IDR;
    volatile uint32_t ODR;
    volatile uint32_t BSRR;
    volatile uint32_t LCKR;
    volatile uint32_t AFRL;
    volatile uint32_t AFRH;
    volatile uint32_t BRR;
}GPIO_TypeDef;

typedef struct __rcc_registers
{
    volatile uint32_t CR;
    volatile uint32_t CFGR;
    volatile uint32_t CIR;
    volatile uint32_t APB2RSTR;
    volatile uint32_t APB1RSTR;
    volatile uint32_t AHBENR;
    volatile uint32_t APB2ENR;
    volatile uint32_t APB1ENR;
    volatile uint32_t BDCR;
    volatile uint32_t CSR;
    volatile uint32_t AHBRSTR;
    volatile uint32_t CFGR2;
    volatile uint32_t CFGR3;
    volatile uint32_t CR2;
}RCC_TypeDef;

typedef struct{
    volatile uint32_t ISER;
    volatile uint32_t Reserved_0[31];
    volatile uint32_t ICER;
    volatile uint32_t Reserved_1[31];
    volatile uint32_t ISPR;
    volatile uint32_t Reserved_2[31];
    volatile uint32_t ICPR;
    volatile uint32_t Reserved_3[95];
    volatile uint32_t IPR[8];
}NVIC_TypeDef;
# 3 "Headers/nvic.h" 2
# 21 "Headers/nvic.h"
void nvic_SetPriority( IRQ_Types irq, uint32_t priority );
# 30 "Headers/nvic.h"
uint32_t nvic_GetPriority( IRQ_Types irq );
# 39 "Headers/nvic.h"
void nvic_EnableIrq( IRQ_Types irq );
# 48 "Headers/nvic.h"
void nvic_DisableIrq( IRQ_Types irq );
# 57 "Headers/nvic.h"
uint32_t nvic_GetPendingIrq( IRQ_Types irq );
# 66 "Headers/nvic.h"
void nvic_SetPendingIrq( IRQ_Types irq );
# 75 "Headers/nvic.h"
void nvic_ClearPendingIrq( IRQ_Types irq );
# 2 "Sources/nvic.c" 2
# 14 "Sources/nvic.c"
void nvic_SetPriority( IRQ_Types irq, uint32_t priority )
{
    ((NVIC_TypeDef *) ((0xE000E000UL) + 0x100UL) )->IPR[( ( (irq) & 0x1FU ) >> 2U )] &= ~( 0xFFU << ( ( (irq) % 4U ) * (1 << 3) ) );
    ((NVIC_TypeDef *) ((0xE000E000UL) + 0x100UL) )->IPR[( ( (irq) & 0x1FU ) >> 2U )] |= ( ( (priority & 0x03U) << 0x06U ) << ( ( (irq) % 4U ) * (1 << 3) ) );
}

uint32_t nvic_GetPriority( IRQ_Types irq )
{
    return ((( ((NVIC_TypeDef *) ((0xE000E000UL) + 0x100UL) )->IPR[( ( (irq) & 0x1FU ) >> 2U )] >> ( ( (irq) % 4U ) * (1 << 3) ) ) & (0xFFU)) >> 0x06U) ;
}

void nvic_EnableIrq( IRQ_Types irq )
{
    ((NVIC_TypeDef *) ((0xE000E000UL) + 0x100UL) )->ISER |= (1 << (irq & 0x1FU));
}

void nvic_DisableIrq( IRQ_Types irq )
{
    ((NVIC_TypeDef *) ((0xE000E000UL) + 0x100UL) )->ICER &= (1 << (irq & 0x1FU));
}

uint32_t nvic_GetPendingIrq( IRQ_Types irq )
{
    return ( (((NVIC_TypeDef *) ((0xE000E000UL) + 0x100UL) )->ISPR & (1 << (irq & 0x1FU)) ) != 0 ? 1U : 0);

}

void nvic_SetPendingIrq( IRQ_Types irq )
{
    ((NVIC_TypeDef *) ((0xE000E000UL) + 0x100UL) )->ISPR = (1 << (irq & 0x1FU));
}

void nvic_ClearPendingIrq( IRQ_Types irq )
{
    ((NVIC_TypeDef *) ((0xE000E000UL) + 0x100UL) )->ICPR = (1 << (irq & 0x1FU));
}
